version: "3.8"

services:
  mysql:
    image: mysql:latest
    container_name: mysql
    restart: unless-stopped
    hostname: 'mysqlserver'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    environment:
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin
      - MYSQL_DATABASE=appointments
      - MYSQL_ROOT_PASSWORD=admin
    volumes:
      - db-data:/var/lib/appointments
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 2s
      timeout: 30s
      retries: 5
    networks:
      - app-network
  back:
    container_name: api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - target:/code
    depends_on:
      mysql:
        condition: service_healthy
    restart: on-failure
    networks:
      - app-network
  front:
    container_name: front
    build:
      context: ../Appointment-App-Front
      dockerfile: Dockerfile
    hostname: "frontend"
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV_TYPE=production
    depends_on:
      - back
    command: npm run prod
    networks:
      - app-network
  nginx:
    image: nginx:stable-alpine
    container_name: nginx-server
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
    tty: true
    depends_on:
      - front
    restart: always
    networks:
      - app-network
volumes:
  db-data:
  target:
  front:

networks:
  app-network:
    driver: bridge